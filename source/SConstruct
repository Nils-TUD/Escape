import sys, os
sys.path.insert(0, 'tools')
import install

target = os.environ.get('ESC_TARGET')
if target != 'eco32' and target != 'mmix' and target != 'x86_64':
	target = 'i586'
cross = target + '-elf-escape'
crossdir = '/opt/escape-cross-' + target
crossver = '7.1.0' if target == 'i586' or target == 'x86_64' else '4.8.2'

# set tgttype
if target == 'i586' or target == 'x86_64':
	tgttype = 'x86'
else:
	tgttype = 'ecommix'

hostenv = Environment(
	ENV = os.environ,
	CXXFLAGS = '-Wall -Wextra -ansi -g'
)
env = Environment(
	CPPFLAGS = ' -D__' + target + '__ -D__' + tgttype + '__',
	CFLAGS = '-Wall -std=c99 -Wextra -Wpointer-arith -Wcast-align -Wwrite-strings'
			+ ' -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -Winline'
			+ ' -Wno-long-long -Wstrict-prototypes -fms-extensions',
	CXXFLAGS = '-Wall -ansi -std=c++0x -Wextra -Wpointer-arith -Wcast-align -Wwrite-strings'
			+ ' -Wmissing-declarations -Wno-long-long',
	ASFLAGS = '-Wa,--warn -DIN_ASM',
	ENV = {'PATH' : crossdir + "/bin:" + os.environ['PATH']},
	CPPPATH = [
		'#include', '#include/cpp',
		crossdir + '/include/c++/' + crossver, crossdir + '/include/c++/' + crossver + '/' + cross
	],
	CXX = cross + '-g++',
	LD = cross + '-ld',
	AS = cross + '-as',
	CC = cross + '-gcc',
	AR = cross + '-ar',
	RANLIB = cross + '-ranlib',
)

linktype = 'static'
if tgttype == 'x86':
	env.Append(
		CFLAGS = ' -fdiagnostics-color=always',
		CXXFLAGS = ' -fdiagnostics-color=always',
	)
	linktype = os.environ.get('ESC_LINKTYPE')
	if linktype != 'static':
		linktype = 'dynamic'
	gcclinktype = os.environ.get('ESC_GCCLINKTYPE')
	if gcclinktype == 'static':
		env.Append(LINKFLAGS = ' -static-libgcc')

btype = os.environ.get('ESC_BUILD')
if btype == 'debug':
	env.Append(
		CFLAGS = ' -O0 -fno-builtin -ggdb -D LOGSERIAL',
		CXXFLAGS = ' -O0 -fno-inline -ggdb'
	)
else:
	env.Append(
		CFLAGS = ' -O3 -fno-builtin -DNDEBUG -fno-omit-frame-pointer',
		CXXFLAGS = ' -O3 -DNDEBUG -fno-omit-frame-pointer'
	)
	btype = 'release'
builddir = 'build/' + target + '-' + btype

if target == 'mmix':
	env.Append(
		# atm we have to disable base-addresses, because the mmix-gcc-port seems to be unable to
		# handle it correctly
		CFLAGS = ' -mno-base-addresses',
		CXXFLAGS = ' -mno-base-addresses',
		# do not warn if instructions are extended to setl,incml,...
		ASFLAGS = ' -Wa,-x'
	)
elif target == 'i586':
	env.Append(
		CFLAGS = ' -mregparm=3',
		CXXFLAGS = ' -mregparm=3'
	)
elif target == 'x86_64':
    # without "-z max-page-size=0x1000" ld produces really large binaries for x86_64, because it
    # aligns to 2MiB (not only in virtual memory, but also in the binary)
	env.Append(
		LINKFLAGS = ' -Wl,-z,max-page-size=0x1000'
	)

env.Append(
	LINKFLAGS = ' -Wl,-rpath-link,' + Dir(builddir + '/bin').abspath
)

verbose = os.environ.get('ESC_VERBOSE',0)
if int(verbose) == 0:
	hostenv['ASCOMSTR']		= env['ASCOMSTR']		= "[AS     ] $TARGET"
	hostenv['ASPPCOMSTR']	= env['ASPPCOMSTR']		= "[ASPP   ] $TARGET"
	hostenv['CCCOMSTR']		= env['CCCOMSTR']		= "[CC     ] $TARGET"
	hostenv['SHCCCOMSTR']	= env['SHCCCOMSTR']		= "[SHCC   ] $TARGET"
	hostenv['CXXCOMSTR']	= env['CXXCOMSTR']		= "[CXX    ] $TARGET"
	hostenv['SHCXXCOMSTR']	= env['SHCXXCOMSTR']	= "[SHCXX  ] $TARGET"
	hostenv['LINKCOMSTR']	= env['LINKCOMSTR']		= "[LD     ] $TARGET"
	hostenv['SHLINKCOMSTR']	= env['SHLINKCOMSTR']	= "[SHLD   ] $TARGET"
	hostenv['ARCOMSTR']		= env['ARCOMSTR']		= "[AR     ] $TARGET"
	hostenv['CPPCOMSTR']	= env['CPPCOMSTR']		= "[CPP    ] $TARGET"
	hostenv['RANLIBCOMSTR']	= env['RANLIBCOMSTR']	= "[RANLIB ] $TARGET"
	hostenv['LEXCOMSTR']	= env['LEXCOMSTR']		= "[LEX    ] $TARGET"
	hostenv['YACCCOMSTR']	= env['YACCCOMSTR']		= "[YACC   ] $TARGET"
	hostenv['LNCOMSTR']		= env['LNCOMSTR']		= "[LN     ] $TARGET"
	hostenv['STRIPCOMSTR']	= env['STRIPCOMSTR']	= "[STRIP  ] $TARGET"
	hostenv['DUMPCOMSTR']	= env['DUMPCOMSTR']		= "[DUMP   ] $TARGET"
	hostenv['MAPCOMSTR']	= env['MAPCOMSTR']		= "[MAP    ] $TARGET"
	hostenv['INSTALLSTR']	= env['INSTALLSTR']		= "[INSTALL] $TARGET"
	hostenv['GENSYMCOMSTR']	= env['GENSYMCOMSTR']	= "[GENSYM ] $TARGET"
	hostenv['OBJCPYCOMSTR']	= env['OBJCPYCOMSTR']	= "[OBJCPY ] $TARGET"

env.Append(
	TGT = target,
	TGTTYPE = tgttype,
	LINKTYPE = linktype,
	CROSS = cross,
	CROSSDIR = Dir(crossdir),
	BUILDDIR = Dir(builddir),
	DISTDIR = Dir(builddir + '/dist'),
	BINDIR = Dir(builddir + '/bin'),
	MAPDIR = Dir(builddir + '/map'),
	DUMPDIR = Dir(builddir + '/dump'),
	SYSLIBPATH = Dir(crossdir + '/lib'),
	SYSGCCLIBPATH = Dir(crossdir + '/lib/gcc/' + cross + '/' + crossver),
	SYSSHGCCPATH = Dir(crossdir + '/' + cross + '/lib')
)
env['LIBPATH'] = [env['BINDIR'], env['SYSLIBPATH']]
hostenv['BINDIR'] = env['BINDIR']
link_addr = 0x1000

def SetLibDeps(env, lib, libs):
	env.Depends(lib, '$SYSGCCLIBPATH/crtbeginS.o')
	env.Depends(lib, '$SYSGCCLIBPATH/crtendS.o')
	for l in libs:
		env.Depends(lib, '$BINDIR/lib' + l + '.so')
	if str(lib[0]) != 'libc.so' and str(lib[0]) != 'libstdc++.so':
		env.Depends(lib, '$BINDIR/libc.so')
		env.Depends(lib, '$BINDIR/libstdc++.so')

def SetProgDeps(env, prog, static, libs, cpp):
	crtsuffix = '.o' if static else 'S.o'
	libsuffix = '.a' if static else '.so'
	for l in libs:
		if l != 'gcc':
			env.Depends(prog, '$BINDIR/lib' + l + libsuffix)
	env.Depends(prog, '$SYSGCCLIBPATH/crt0' + crtsuffix)
	env.Depends(prog, '$SYSGCCLIBPATH/crt1' + crtsuffix)
	env.Depends(prog, '$SYSGCCLIBPATH/crtn' + crtsuffix)
	env.Depends(prog, '$SYSGCCLIBPATH/crtbegin.o')
	env.Depends(prog, '$SYSGCCLIBPATH/crtend.o')
	env.Depends(prog, '$BINDIR/libc' + libsuffix)
	env.Depends(prog, '$BINDIR/libg' + libsuffix)
	env.Depends(prog, '$BINDIR/libm' + libsuffix)
	if static:
		env.Depends(prog, '$SYSGCCLIBPATH/libgcc.a')
		if env['TGTTYPE'] == 'x86':
			env.Depends(prog, '$SYSGCCLIBPATH/libgcc_eh.a')
		if cpp:
			env.Depends(prog, '$SYSLIBPATH/libsupc++.a')
	else:
		env.Depends(prog, '$SYSSHGCCPATH/libgcc_s.so.1')
	if cpp:
		env.Depends(prog, '$BINDIR/libstdc++' + libsuffix)

def SetLinkAddr(env, static):
	global link_addr
	# TODO this doesn't seem to work with MMIX. why?
	if env['TGT'] != 'mmix':
		if static:
			env.Append(LINKFLAGS = ' -Wl,--section-start=.init=' + ("0x%x" % link_addr))
		else:
			env.Append(LINKFLAGS = ' -Wl,--section-start=.interp=' + ("0x%x" % link_addr))
		link_addr += 0x20000

def EscapeMap(env, target, source):
	map = env.Command(
		target, source, Action('tools/createmap-$TGT $SOURCE > $TARGET', '$MAPCOMSTR')
	)
	env.Depends(map, '#tools/createmap-$TGT')
	env.Install('$MAPDIR', map)

def EscapeDump(env, target, source):
	dump = env.Command(
		target, source, Action('$BINDIR/hostdump $SOURCE > $TARGET', '$DUMPCOMSTR')
	)
	env.Depends(dump, '$BINDIR/hostdump')
	env.Install('$BUILDDIR', dump)

def EscapeStrip(env, target, source):
    return env.Command(
        target, source, Action(cross + '-strip -s -o $TARGET $SOURCE', '$STRIPCOMSTR')
    )

def EscapeLink(env, target, source):
	return env.Command(
		target, source, Action('ln -sf ${SOURCE.abspath} $TARGET', '$LNCOMSTR')
	)

def EscapeCPP(env, target, source):
	return env.Command(
		target, source, Action(
			'$CROSSDIR/bin/$CROSS-cpp $CPPFLAGS $SOURCE $TARGET',
			'$CPPCOMSTR'
		)
	)

def EscapeGenSym(env, target, source):
	return env.Command(
		target, source, Action('./tools/gensymbols.sh $SOURCE > $TARGET', '$GENSYMCOMSTR')
	)

def EscapeObjCpy(env, target, source):
	return env.Command(
		target, source, Action(
			'$CROSSDIR/bin/$CROSS-objcopy $OBJCPYFLAGS $SOURCE $TARGET',
			'$OBJCPYCOMSTR'
		)
	)

def EscapeGCCLibs(env, static):
	if static:
		return ['gcc', 'gcc_eh'] if env['TGTTYPE'] == 'x86' else ['gcc']
	return ['gcc_s']

def GetLibDeps(env, libs):
	if 'LIBDEPS' in env:
		all = []
		for l in libs:
			all.append(l)
			if l in env['LIBDEPS']:
				all += GetLibDeps(env, env['LIBDEPS'][l])
		return all
	return libs;

def EscapeCProg(env, prefix, target, source, force_static = False, var_addr = True, LIBS = []):
	myenv = env.Clone()
	static = force_static or env['LINKTYPE'] == 'static'
	if static:
		myenv.Append(LINKFLAGS = ' -static -Wl,-static')
	if var_addr:
		SetLinkAddr(myenv, static)
	gcclibs = EscapeGCCLibs(env, static)
	libs = list(set(GetLibDeps(myenv, gcclibs + LIBS)))
	prog = myenv.Program(target, source, LIBS = libs)
	SetProgDeps(myenv, prog, static, LIBS, False)
	myenv.EscapeMap(target + '.map', prog)
	if prefix != '':
		myenv.Install('$DISTDIR/' + prefix, prog)
		myenv.EscapeLink('$BINDIR/' + target, prog)
	return prog

def EscapeCXXProg(env, prefix, target, source, force_static = False, var_addr = True, LIBS = []):
	myenv = env.Clone()
	static = force_static or env['LINKTYPE'] == 'static'
	if static:
		myenv.Append(LINKFLAGS = ' -static -Wl,-static')
	if var_addr:
		SetLinkAddr(myenv, static)
	gcclibs = EscapeGCCLibs(env, static)
	libs = gcclibs + LIBS + ['stdc++', 'esc']
	if static:
		libs += ['supc++']
	libs = list(set(GetLibDeps(myenv, libs)))
	prog = myenv.Program(target, source, LIBS = libs)
	SetProgDeps(myenv, prog, static, LIBS, True)
	myenv.EscapeMap(target + '.map', prog)
	if prefix != '':
		myenv.Install('$DISTDIR/' + prefix, prog)
		myenv.EscapeLink('$BINDIR/' + target, prog)
	return prog

def EscapeLib(env, target, source, LIBS = []):
	myenv = env.Clone()
	stlib = myenv.StaticLibrary(target, source)
	env.Install('$BINDIR', stlib)
	if env['TGTTYPE'] == 'x86':
		shenv = myenv.Clone()
		shenv.Append(
			CPPFLAGS = ' -DSHAREDLIB=1',
			LINKFLAGS = ' -Wl,-shared -Wl,-soname,lib' + target + '.so'
		)
		shlib = shenv.SharedLibrary(target, source, LIBS = LIBS)
		SetLibDeps(env, shlib, LIBS)
		env.Install('$DISTDIR/lib', shlib)
		env.EscapeLink('$BINDIR/lib' + target + '.so', shlib)
		env.EscapeMap('lib' + target + '.map', shlib)

env.AddMethod(EscapeMap)
env.AddMethod(EscapeDump)
env.AddMethod(EscapeStrip)
env.AddMethod(EscapeCProg)
env.AddMethod(EscapeCXXProg)
env.AddMethod(EscapeLib)
env.AddMethod(EscapeLink)
env.AddMethod(EscapeCPP)
env.AddMethod(EscapeGenSym)
env.AddMethod(EscapeObjCpy)
env.AddMethod(install.InstallFiles)

# always use grouping for static libraries, because they may depend on each other so that we want
# to cycle through them until all references are resolved.
env['_LIBFLAGS'] = '-Wl,--start-group ' + env['_LIBFLAGS'] + ' -Wl,--end-group'

hostenv.SConscript('tools/SConscript', 'hostenv',
				   variant_dir = builddir + '/tools', duplicate = 0)

for d in ['dist', 'bootloader', 'lib', 'drivers', 'user', 'kernel']:
	env.SConscript(d + '/SConscript', 'env',
				   variant_dir = builddir + '/' + d, duplicate = 0)

# EOF
